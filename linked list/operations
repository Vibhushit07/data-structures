package linkedlist;
import java.util.*;
public class insert
{
   static Scanner sc=new Scanner(System.in);
    static class Node
    {
        static int data;
       static Node next;
        Node(int data)
        {
            this.data=data;
        }
    }
    static Node head;
    static void addAtEnd()
    {
        System.out.println("Enter value");
        int data=sc.nextInt();
        Node node = new Node(data);
        node.data = data;
        node.next = null;
        if (head == null)
        {
            head = node;
        }
        else
        {
            Node n = head;
            while (n.next != null)
            {
                n = n.next;
            }
            n.next = node;
        }
    }
    static void addAtStart()
    {
        System.out.println("Enter value");
        int data=sc.nextInt();
        Node node=new Node(data);
        node.data=data;
        node.next=null;
        node.next=head;
        head=node;
    }
    static void addInBetween()
    {
        System.out.println("enter index");
        int index=sc.nextInt();
        System.out.println("enter index");
        int data=sc.nextInt();
        Node node=new Node(data);
        node.data=data;
        node.next=null;
        Node n=head;
        for(int i=0;i<index-1;i++)
        {
            n=n.next;
        }
        node.next=n.next;
        n.next=node;
    }
    static void count()
    {
        Node n=head;
        int count=1;
        while(n.next!=null)
        {
            n=n.next;
            count++;
        }
        System.out.println(count);
    }
    static void deleteAtK()
    {
        System.out.println("enter index");
        int index=sc.nextInt();
        Node n=head;
        Node n1=null;
        for(int i=1;i<index;i++)
        {
            n=n.next;
        }
        n1=n.next;
        n.next=n1.next;
    }
    static void deleteK()
    {
        System.out.println("Enter value");
        int value=sc.nextInt();
        Node n=head;
        Node n1=head;
        Node n2=null;
        int c=1;
        int index;
        while(n.data!=value)
        {
            n=n.next;
            c++;
        }
        index=c;
        for(int i=1;i<index-1;i++)
        {
            n1=n1.next;
        }
        n2=n1.next;
        n1.next=n2.next;
    }
    static void deleteFromEnd()
    {
        System.out.println("Enter index");
        int index=sc.nextInt();
        int c=1;
        Node n=head;
        while(n.next!=null)
        {
            c++;
            n=n.next;
        }
        int pos=c-index+1;
        Node n1=head;
        Node n2=null;
        for(int i=0;i<pos-2;i++)
        {
            n1=n1.next;
        }
        n2=n1.next;
        n1.next=n2.next;
    }
    static void middleElement()
    {
        Node n=head;
        Node n1=head;
        while(n1.next!=null && n1.next.next!=null)
        {
            n=n.next;
            n1=n1.next.next;
        }
        System.out.println(n.data);
    }
    static void lastToFirst()
    {
        Node n=head;
        Node n1=null;
        while(n.next!=null)
        {
            n1=n;
            n=n.next;
        }
        n1.next=null;
        n.next=head;
        head=n;
    }
    static void reverse()
    {
        Node curr=head;
        Node prev=null;
        Node next=null;
        while(curr!=null)
        {
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        head=prev;
    }
    static void palindrome()
    {
        int c=1,c1=0;
        Node n=head;
        while(n.next!=null)
        {
            c++;
            n=n.next;
        }
        Node curr=head;
        Node prev=null;
        Node next=null;
        while(c1==c)
        {
            c1++;
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
    }
    static void palindromeUsingStack()
    {
        Stack <Integer>s=new Stack<Integer>();
        Node n=head;
        while(n!=null)
        {
            s.push(n.data);
            n=n.next;
        }
        Node n1=head;
        int flag=0;
        while(n1!=null)
        {
            int i=s.pop();
            if(n1.data!=i)
            {
                flag=1;
                break;
            }
            n1=n1.next;
        }
        if(flag==1)
        {
            System.out.println("not palindrome");
        }
        else
        {
            System.out.println("palindrome");
        }
    }

    static void bubble_sort()
    {
        Node n=head;
        int c=1;
        while(n.next!=null)
        {
            c++;
            n=n.next;
        }
        for(int i=0;i<c;i++)
        {
            Node curr=head;
            Node next=head.next;
            for(int j=0;j<c-1;j++)
            {
                int temp;
                if(curr.data>next.data)
                {
                    temp=curr.data;
                    curr.data=next.data;
                    next.data=temp;
                }
                curr=next;
                next=next.next;
            }
        }
    }
    static void show()
    {
        Node n = head;
        while (n.next != null)
        {
            System.out.println(n.data);
            n = n.next;
        }
        System.out.println(n.data);
    }


    public static void main(String args[])
    {
        int choice;
        do {
            System.out.println("1.add an element at end");
            System.out.println("2.add an element at start");
            System.out.println("3.add an element in between");
            System.out.println("4.count elements");
            System.out.println("5.delete at K");
            System.out.println("6.delete K");
            System.out.println("7.delete at end");
            System.out.println("8.middle element");
            System.out.println("9.move last to first");
            System.out.println("10.reverse");
            System.out.println("11.palindrome");
            System.out.println("12.palindrome using stack");
            System.out.println("13.display");
            System.out.println("14.end");
            System.out.println("15.bubble sort");
            choice = sc.nextInt();
            switch (choice) {
                case 1:
                    addAtEnd();
                    break;
                case 2:
                    addAtStart();
                    break;
                case 3:
                    addInBetween();
                    break;
                case 4:
                    count();
                    break;
                case 5:
                    deleteAtK();
                    break;
                case 6:
                    deleteK();
                    break;
                case 7:
                    deleteFromEnd();
                    break;
                case 8:
                    middleElement();
                    break;
                case 9:
                    lastToFirst();
                    break;
                case 10:
                    reverse();
                    break;
                case 11:
                    palindrome();
                    break;
                case 12:
                    palindromeUsingStack();
                    break;
                case 15:
                    bubble_sort();
                    break;
                case 13:
                    show();
                    break;
                case 14:
                    break;
                default:
                    System.out.println("Enter valid number");
            }
        }while(choice!=14);
    }
}
