
public class operations {
    static class Node
    {
        int data;
        Node left;
        Node right;
        Node(int data)
        {
            this.data=data;
            left=null;
            right=null;
        }
    }
    static Node root;
    static void insert(int ele)
    {
        root=insert1(root,ele);
    }
    static Node insert1(Node root,int ele)
    {
        if (root == null) {
            root = new Node(ele);
            return root;
        }
        if (ele < root.data) {
            root.left = insert1(root.left, ele);
        } else if (ele > root.data) {
            root.right = insert1(root.right, ele);
        }
        return root;
    }
    static void search(int ele)
    {
        search1(root,ele);
    }
    static void search1(Node root,int ele)
    {
        if(root==null)
        {
            System.out.println("no");
        }
        else if(root.data==ele)
        {
            System.out.println("yes");
        }
        else if(root.data>ele)
        {
            search1(root.left,ele);
        }
        else if(root.data<ele)
        {
            search1(root.right,ele);
        }
    }
    static void show()
    {
        traversal(root);
    }
    static void traversal(Node root)
    {
        if (root != null) {
            traversal(root.left);
            System.out.println(root.data);
            traversal(root.right);
        }
    }
    static void min()
    {
        min1( root);
    }
    static void min1(Node root)
    {
        int m=root.data;
        while(root.left!=null)
        {
            root=root.left;
            m=root.data;
        }
        System.out.println("min : "+m);
    }
    static void max()
    {
        max1(root);
    }
    static void max1(Node root)
    {
        int m=root.data;
        if(root==null)
        {
            System.out.println("empty");
        }
        while(root!=null)
        {
            m=root.data;
            root=root.right;
        }
        System.out.println("max : "+m);
    }
    static void parent(int ele)
    {
        parent1(root,ele);
    }
    static void parent1(Node root,int ele)
    {int parent = 0;
        if(root==null) {
            System.out.println("empty");
        }
        while(root!=null)
        {
            if(ele>root.data){
                parent=root.data;
                root=root.right;
            }
            else if(ele<root.data){
                parent=root.data;
                root=root.left;
            }
            else{
                break  ;
            }
        }
        System.out.println("parent : "+parent);
    }
    static void sibling(int ele){
        sibling1(root,ele);
    }
    static void sibling1(Node root,int ele){
        if(root==null){
            System.out.println("empty");
        }
        Node parent=null;
        int sibling=0;
        while(root!=null) {
            if (ele > root.data) {
                parent = root;
                root = root.right;
            } else if (ele < root.data) {
                parent = root;
                root = root.left;
            } else {
                break;
            }
        }
        if(ele == parent.left.data){
            sibling=parent.right.data;
        }
        else if(ele==parent.right.data){
            sibling=parent.left.data;
        }
        else{
            System.out.println("no parent");
        }
        System.out.println("sibling : "+sibling);
    }
     static int getleaf()
     {
         return getleaf1(root);
     }
     static int getleaf1(Node root)
     {
         if(root==null){
            return 0;
         }
         else if(root.left==null && root.right==null) {
             return 1;
         }
         else{
             return getleaf1(root.left) + getleaf1(root.right);
         }
     }
     static int height() {
          return height1(root);
     }
     static int h1=0;
     static int height1(Node root){
        if(root==null){
            return 0;
        }
        else{
            int rh=height1(root.right);
            int lh=height1(root.left);
            if(rh>lh){
                return rh+1;
            }
            else{
                return lh+1;
            }
        }
     }
    public static void main(String args[])
    {
        insert(6);
        insert(4);
        insert(8);
        insert(3);
        insert(5);
        insert(7);
        insert(9);
        show();
//        search(12);
        min();
        max();
        parent(7);
        sibling(8);
        int l = getleaf();
        System.out.println("leaf count : "+l);
        int h1= height();
        System.out.println("height : "+h1);
    }
}

