package binary_search_tree;


public class operations {
    static class Node
    {
        int data;
        Node left;
        Node right;
        Node(int data)
        {
            this.data=data;
            left=null;
            right=null;
        }
    }
    static Node root;
    static void insert(int ele)
    {
        root=insert1(root,ele);
    }
    static Node insert1(Node root,int ele)
    {
        if (root == null) {
            root = new Node(ele);
            return root;
        }
        if (ele < root.data) {
            root.left = insert1(root.left, ele);
        } else if (ele > root.data) {
            root.right = insert1(root.right, ele);
        }
        return root;
    }
    static void search(int ele)
    {
        search1(root,ele);
    }
    static void search1(Node root,int ele)
    {
        if(root==null)
        {
            System.out.println("no");
        }
        else if(root.data==ele)
        {
            System.out.println("yes");
        }
        else if(root.data>ele)
        {
            search1(root.left,ele);
        }
        else if(root.data<ele)
        {
            search1(root.right,ele);
        }
    }
    static void show()
    {
        traversal(root);
    }
    static void traversal(Node root)
    {
        if (root != null) {
            traversal(root.left);
            System.out.println(root.data);
            traversal(root.right);
        }
    }
    static void min()
    {
        min1( root);
    }
    static void min1(Node root)
    {
        int m=root.data;
        while(root.left!=null)
        {
            root=root.left;
            m=root.data;
        }
        System.out.println("min : "+m);
    }
    static void max()
    {
        max1(root);
    }
    static void max1(Node root)
    {
        int m=root.data;
        if(root==null)
        {
            System.out.println("empty");
        }
        while(root!=null)
        {
            m=root.data;
            root=root.right;
        }
        System.out.println("max : "+m);
    }
    static void parent(int ele)
    {
        parent1(root,ele);
    }
    static void parent1(Node root,int ele)
    {int parent = 0;
        if(root==null) {
            System.out.println("empty");
        }
        while(root!=null)
        {
            if(ele>root.data){
                parent=root.data;
                root=root.right;
            }
            else if(ele<root.data){
                parent=root.data;
                root=root.left;
            }
            else{
                break  ;
            }
        }
        System.out.println("parent : "+parent);
    }
    static void sibling(int ele){
        sibling1(root,ele);
    }
    static void sibling1(Node root,int ele){
        if(root==null){
            System.out.println("empty");
        }
        Node parent=null;
        int sibling=0;
        while(root!=null) {
            if (ele > root.data) {
                parent = root;
                root = root.right;
            } else if (ele < root.data) {
                parent = root;
                root = root.left;
            } else {
                break;
            }
        }
        if(ele == parent.left.data){
            sibling=parent.right.data;
        }
        else if(ele==parent.right.data){
            sibling=parent.left.data;
        }
        else{
            System.out.println("no parent");
        }
        System.out.println("sibling : "+sibling);
    }
     static int getleaf()
     {
         return getleaf1(root);
     }
     static int getleaf1(Node root)
     {
         if(root==null){
            return 0;
         }
         else if(root.left==null && root.right==null) {
             return 1;
         }
         else{
             return getleaf1(root.left) + getleaf1(root.right);
         }
     }
     static int height() {
          return height1(root);
     }
     static int h1=0;
     static int height1(Node root){
        if(root==null){
            return 0;
        }
        else{
            int rh=height1(root.right);
            int lh=height1(root.left);
            if(rh>lh){
                return rh+1;
            }
            else{
                return lh+1;
            }
        }
     }

    static int find_lca(int n1,int n2)
    {
        return(find_lca1(n1, n2, root));
    }
    static int find_lca1(int n1, int n2, Node root)
    {
        if(n1>root.data && n2>root.data)
        {
            return find_lca1(n1,n2,root.right);
        }
        if(n1<root.data && n2<root.data)
        {
            return find_lca1(n1,n2,root.left);
        }
        return root.data;
    }
    static int second_largest()
    {
        return second_largest1( root);
    }
    static int second_largest1(Node root)
    {
        int secondMax;
        Node pre = root;
        Node cur = root;
        while (cur.right != null)
        {
            pre = cur;
            cur = cur.right;
        }
        if (cur.left != null)
        {
            cur = cur.left;
            while (cur.right != null)
                cur = cur.right;
            secondMax = cur.data;
        }
        else
        {
            secondMax = pre.data;
        }
        return secondMax;
    }
    static int distance_from_root(Node root, int x)
    {
        if(root.data==x)
            return 0;
        else if(root.data>x)
            return 1+distance_from_root(root.left,x);
        return 1+distance_from_root(root.right,x);
    }
    static int shortest_distance(int a,int b)
    {
        return shortest_distance1(root,a,b);
    }
    static int shortest_distance1(Node root, int a, int b)
    {
        if(root==null)
            return 0;
        if(a>root.data && b>root.data)
        {
            return shortest_distance1(root.right,a,b);
        }
        if(a<root.data && b<root.data)
        {
            return shortest_distance1(root.left,a,b);
        }
        if(a>=root.data && b<=root.data || a<=root.data && b>=root.data) {
            return (distance_from_root(root, a) + distance_from_root(root, b));
        }
        return 0;
    }
    static int height(Node root)
    {
        if(root==null)
            return 0;
        int lh=height(root.left);
        int rh=height(root.right);
        if(lh>rh)
            return lh+1;
        else
            return rh+1;
    }
    static void level_order()
    {
        int h=height(root);
        for(int i=1;i<=h;i++)
        {
            level_order_traversal(root,i);
        }
    }
    static void level_order_traversal(Node root, int level)
    {
        if(root==null)
            return;
        else if(level==1)
            System.out.println(root.data);
        else  {
            level_order_traversal(root.left, level - 1);
            level_order_traversal(root.right, level - 1);
        }
    }
    static void print_leaf(prac_bst.Node root)
    {
        if(root==null)
            return;
        if(root.left==null && root.right==null){
            System.out.println(root.data);
            return;}
        if(root.left!=null )
            print_leaf(root.left);
        if(root.right!=null )
            print_leaf(root.right);
    }
 //   static void level_order()
    public static void main(String args[])
    {
        insert(6);
        insert(4);
        insert(8);
        insert(3);
        insert(5);
        insert(7);
        insert(9);
        show();
//        search(12);
        min();
        max();
        parent(7);
        sibling(8);
        int l = getleaf();
        int a=second_largest();
        int b=shortest_distance(2,3);
        System.out.println("leaf count : "+l);
        int h1= height();
        System.out.println("height : "+h1);
        System.out.println("lllll");
     //   level_order();
    }
}
