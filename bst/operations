package binary_search_tree;
class bst {
    class Node {
        Node left, right;
        int key;

        Node(int key) {
            this.key = key;
            left = null;
            right = null;
        }
    }
    Node root = null;
    void insert(int value)
    {
        root = insertRec(root, value);
    }
    Node insertRec(Node root, int key)
    {
        if (root == null) {
            root = new Node(key);
            return root;
        }
        if (key < root.key) {
            root.left = insertRec(root.left, key);
        } else if (key > root.key) {
            root.right = insertRec(root.right, key);
        }
        return root;
    }

    void search(int value) {
        search1(root, value);
    }
    void search1(Node root, int value) {
        if (root == null) {
            System.out.println("no");
        } else if (root.key == value) {
            System.out.println("yes");
        } else if (root.key > value) {
            search1(root.left, value);
        } else if (root.key < value) {
            search1(root.right, value);
        }
    }

    void show()
    {
        traversal(root);
    }
    void traversal(Node root) {
        if (root != null) {
            traversal(root.left);
            System.out.println(root.key);
            traversal(root.right);
        }
    }
}
    public class insert
    {
        public static void main(String args[])
        {
            bst b=new bst();
            b.insert(6);
            b.insert(4);
            b.insert(8);
            b.insert(3);
            b.insert(5);
            b.insert(7);
            b.insert(9);
            b.show();
    //        b.search(2);
        }
    }
